#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

module Services
  # forward declarations
  class FooRequest < ::ProtocolBuffers::Message; end
  class FooResponse < ::ProtocolBuffers::Message; end
  class BarRequest < ::ProtocolBuffers::Message; end
  class BarResponse < ::ProtocolBuffers::Message; end

  class FooRequest < ::ProtocolBuffers::Message
    set_fully_qualified_name "services.FooRequest"

    optional :sint64, :one, 1
  end

  class FooResponse < ::ProtocolBuffers::Message
    set_fully_qualified_name "services.FooResponse"

    optional :uint64, :two, 1
  end

  class BarRequest < ::ProtocolBuffers::Message
    set_fully_qualified_name "services.BarRequest"

    optional :string, :three, 1
  end

  class BarResponse < ::ProtocolBuffers::Message
    set_fully_qualified_name "services.BarResponse"

    optional :bytes, :four, 1
  end

  class FooBarService < ::ProtocolBuffers::Service
    set_fully_qualified_name "services.FooBarService"

    rpc :get_foo, "GetFoo", ::Services::FooRequest, ::Services::FooResponse
    def get_foo(message)
      ensure_handler_defined!
      ensure_correct_request_type!(:get_foo, message)
      raw_reponse = @handler.send(:get_foo, message.to_hash)
      types_for(:get_foo)[:response].new(raw_reponse)
    end

    rpc :get_bar, "GetBar", ::Services::BarRequest, ::Services::BarResponse
    def get_bar(message)
      ensure_handler_defined!
      ensure_correct_request_type!(:get_bar, message)
      raw_reponse = @handler.send(:get_bar, message.to_hash)
      types_for(:get_bar)[:response].new(raw_reponse)
    end

  end
  class NoNameFooBarService < ::ProtocolBuffers::Service
    #purposefully removing qualified name to make sure that nothing breaks
    #set_fully_qualified_name "services.NoNameFooBarService"

    rpc :get_foo, "GetFoo", ::Services::FooRequest, ::Services::FooResponse
    def get_foo(message)
      ensure_handler_defined!
      ensure_correct_request_type!(:get_foo, message)
      raw_reponse = @handler.send(:get_foo, message.to_hash)
      types_for(:get_foo)[:response].new(raw_reponse)
    end

    rpc :get_bar, "GetBar", ::Services::BarRequest, ::Services::BarResponse
    def get_bar(message)
      ensure_handler_defined!
      ensure_correct_request_type!(:get_bar, message)
      raw_reponse = @handler.send(:get_bar, message.to_hash)
      types_for(:get_bar)[:response].new(raw_reponse)
    end

  end
end